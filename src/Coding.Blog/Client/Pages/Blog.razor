@page "/"
@page "/{Tag}"

<div class="container mb-3">
    @if (!Posts.Any())
    {
        <div class="d-flex align-items-center">
            <strong class="ms-2">Loading posts...</strong>
            <div class="spinner-border ms-auto me-2 mt-2" role="status" aria-hidden="true"></div>
        </div>
    }
    else
    {
        <div class="text-center mb-3">
            <input type="search" class="form-control rounded" placeholder="Search..." aria-label="search" aria-describedby="search-button" @bind-value="_searchText" @bind-value:event="oninput">
        </div>
        <div class="row g-3">
            @foreach (var (slug, post) in GetFilteredPosts())
            {
                <div class="col-12 col-lg-4">
                    <div class="card border-0 shadow">
                        <a href="@($"post/{slug}")">
                            <img src=@post.Hero.ImgixUrl class="card-img-top" alt="hero"/>
                        </a>
                        <div class="card-body">
                            <h5 class="card-title">@post.Title</h5>
                            <h6 class="card-subtitle text-muted">@post.DatePublished.ToShortDateString() · @post.ReadingTime.ToTimeSpan().Minutes minute read</h6>
                            <a href="@($"post/{slug}")" class="card-link">Read More</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {

    private string _searchText = string.Empty;

    [Parameter]
    public string? Tag { get; set; }

    [CascadingParameter(Name = "Posts")]
    private IDictionary<string, Post> Posts { get; set; } = new Dictionary<string, Post>();

    private IDictionary<string, Post> GetFilteredPosts() => GetTaggedPosts(GetSearchedPosts(Posts));

    private IDictionary<string, Post> GetSearchedPosts(IDictionary<string, Post> posts)
    {
        return string.IsNullOrEmpty(_searchText) ? posts : posts.Where(post =>
        {
            var postValue = post.Value;

            return postValue.Title.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ||
                   postValue.Tags.Any(tag => tag.Contains(_searchText, StringComparison.OrdinalIgnoreCase)) ||
                   postValue.Content.Contains(_searchText, StringComparison.OrdinalIgnoreCase);
        }).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    private IDictionary<string, Post> GetTaggedPosts(IDictionary<string, Post> posts) => Tag is null ?
        posts :
        posts.Where(post => post.Value.Tags.Any(tag => tag.Equals(Tag, StringComparison.OrdinalIgnoreCase))).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

}
