@page "/reading"
@implements IDisposable

<PageTitle>Will Baldoumas | Reading Recommendations</PageTitle>

<HeadContent>
    <meta name="description" content="Some reading recommendations based on books that I've read and enjoyed.">
</HeadContent>

<div class="container mb-3">
    @if (Books is null)
    {
        <LoadingSpinner/>
    }
    else
    {
        @if (!Books.Any())
        {
            <div class="alert alert-secondary" role="alert">
                No content found. Consider reloading the page.
            </div>
        }
        else
        {
            <h1 class="text-center">Reading Recommendations</h1>

            <div>
                <p>
                    Below are some reading recommendations based on books that I've read and enjoyed. Most are programming-language and technology-agnostic and instead focus on building up the fundamentals needed for a successful career as a software engineer.
                </p>
                <p>
                    <em>Last updated: @Books.Max(book => book.DatePublished).ToShortDateString()</em>
                </p>
            </div>

            @foreach (var book in Books)
            {
                <div class="card rounded">
                    <a href="@book.PurchaseUrl" target="_blank">
                        <img src="@book.CoverImageUrl" alt="@book.Title" class="rounded mx-auto d-block card-img-top" />
                    </a>
                    <div class="card-body rounded">
                        <a href="@book.PurchaseUrl" class="card-link" target="_blank">
                            <h3 class="text-center card-title">@book.Title</h3>
                        </a>
                        <div class="card-text">
                            @book.Content.ToMarkupString(MarkdownPipeline)
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@code {

    private IEnumerable<Book>? Books { get; set; }

    private const string BooksKey = "Books";

    private PersistingComponentStateSubscription _persistingComponentStateSubscription;

    protected override async Task OnInitializedAsync()
    {
        _persistingComponentStateSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        Books = await PersistentBooksService.GetAsync(ApplicationState, BooksKey);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await JavaScript.InvokeVoidAsync("resetScrollPosition");

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(BooksKey, Books);

        return Task.CompletedTask;
    }

    public void Dispose() => _persistingComponentStateSubscription.Dispose();
}
