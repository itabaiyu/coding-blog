@page "/post/{Slug}"
@implements IDisposable

<PageTitle>Will Baldoumas | @Title</PageTitle>

<HeadContent>
    <meta name="description" content="@_selectedPost?.Title">
</HeadContent>

<div class="container mb-3">
    @if (Posts is not null && _selectedPost is null)
    {
        <div class="alert alert-secondary" role="alert">
            No post found at address <strong>@Slug</strong>. Navigate to <a href="">blog</a> to view all posts.
        </div>
    }
    else
    {
        @if (_selectedPost is null)
        {
            <LoadingSpinner/>
        }
        else
        {
            <div class="row justify-content-center">
                <div class="col col-auto">
                    <h1>@_selectedPost.Title</h1>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col col-auto">
                    <p class="text-light">@_selectedPost.DatePublished.ToPreformattedString() · @_selectedPost.ReadingTime.Minutes minute read</p>
                </div>
            </div>
            <div class="overflow-hidden">
                <div class="row justify-content-center">
                    <div class="col col-auto">
                        <img class="rounded mx-auto d-block img-fluid post-hero" src="@_selectedPost.Image.ImgixUrl" alt="hero">
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col col-auto mt-2">
                        <TagsDisplay Tags=@_selectedPost.Tags></TagsDisplay>
                    </div>
                </div>
                <hr/>
                <div class="row">
                    <div class="card mb-3 shadow-sm rounded">
                        <div class="card-body rounded">
                            <div class="col">
                                <div>@_selectedPost.Content.ToMarkupString(MarkdownPipeline)</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row justify-content-between">
                    <div class="col col-auto">
                        @if (_selectedPost.Next is not null)
                        {
                            <h6 class="text-light">Next</h6>
                            <a href="@($"post/{_selectedPost.Next.Slug}")">
                                <h5>@_selectedPost.Next.Title</h5>
                            </a>
                        }
                    </div>
                    <div class="col col-auto">
                        @if (_selectedPost.Previous is not null)
                        {
                            <h6 class="text-light text-end">Previous</h6>
                            <a href="@($"post/{_selectedPost.Previous.Slug}")">
                                <h5>@_selectedPost.Previous.Title</h5>
                            </a>
                        }
                    </div>
                </div>
                <div class="row justify-content-center mt-3">
                    <div class="col col-auto">
                        <button class="btn btn-secondary btn-lg" @onclick="NavigateToMain">Back</button>
                    </div>
                </div>
                <div class="row justify-content-center mt-3">
                    <div class="card shadow-sm rounded">
                        <div class="card-body rounded">
                            <script src="https://giscus.app/client.js"
                                    data-repo="wbaldoumas/coding-blog"
                                    data-repo-id="MDEwOlJlcG9zaXRvcnk0MDE1MDQwMDY="
                                    data-category="Announcements"
                                    data-category-id="DIC_kwDOF-53Bs4CcJes"
                                    data-mapping="pathname"
                                    data-strict="1"
                                    data-reactions-enabled="1"
                                    data-emit-metadata="0"
                                    data-input-position="top"
                                    data-theme="dark"
                                    data-lang="en"
                                    data-loading="lazy"
                                    crossorigin="anonymous"
                                    async>
                            </script>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {

    [Parameter] public string Slug { get; set; } = string.Empty;

    private const string PostsKey = "Posts";

    private PersistingComponentStateSubscription _persistingComponentStateSubscription;

    private IDictionary<string, Post>? Posts { get; set; }

    private Post? _selectedPost;

    private string Title => _selectedPost?.Title ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _persistingComponentStateSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        await RefreshPostAsync();
    }

    protected override Task OnParametersSetAsync() => RefreshPostAsync();

    private async Task RefreshPostAsync()
    {
        var posts = await PersistentPostsService.GetAsync(ApplicationState, PostsKey);

        Posts = PostLinker.Link(posts?.Values ?? new List<Post>()).ToDictionary(post => post.Slug, post => post, StringComparer.Ordinal);

        Posts.TryGetValue(Slug, out _selectedPost);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await JavaScript.InvokeVoidAsync("resetScrollPosition");

    private void NavigateToMain() => NavigationManager.NavigateTo("");

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(PostsKey, Posts);

        return Task.CompletedTask;
    }

    public void Dispose() => _persistingComponentStateSubscription.Dispose();
}
