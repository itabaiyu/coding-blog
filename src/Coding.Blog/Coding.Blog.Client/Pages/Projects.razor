@page "/projects"
@implements IDisposable

<PageTitle>Will Baldoumas | Projects</PageTitle>

<HeadContent>
    <meta name="description" content="A sample of the projects which I maintain, spanning websites, libraries, and command line applications.">
</HeadContent>

<div class="container mb-3">
    @if (_projects is not null)
    {
        @if (!_projects.Any())
        {
            <div class="alert alert-secondary" role="alert">
                No content found. Consider reloading the page.
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var project in _projects.OrderBy(project => project.Rank))
                {
                    <div class="col-12">
                        <div class="card mb-3 border-0 shadow">
                            <div class="row g-0">
                                <div class="col-md-4 d-flex align-items-center card-img-container">
                                    <img src="@project.Image.ImgixUrl" class="card-img-top" alt="@project.Title">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body rounded">
                                        <h5 class="card-title">@project.Title</h5>
                                        <p class="card-text">@project.Description.ToMarkupString(MarkdownPipeline)</p>
                                        <p class="card-text">
                                            <TagsDisplay Tags=@project.DisplayTags.Value/>
                                        </p>
                                    </div>
                                    <div class="mt-auto p-3">
                                        <a href="@project.ProjectUrl" target="_blank" rel="noreferrer noopener" class="btn btn-success w-100"><i class="fab fa-github"></i> View on GitHub</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    private IEnumerable<Project>? _projects;

    private PersistingComponentStateSubscription _persistingComponentStateSubscription;

    protected override async Task OnInitializedAsync()
    {
        _persistingComponentStateSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        _projects = await ProjectApplicationStateService.GetAsync(ApplicationState, ProjectsState.Key);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await JSInteropService.ResetScrollPositionAsync();

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(ProjectsState.Key, _projects);

        return Task.CompletedTask;
    }

    public void Dispose() => _persistingComponentStateSubscription.Dispose();
}
