@page "/"
@page "/search"
@implements IDisposable

<PageTitle>Will Baldoumas | Blog</PageTitle>

<HeadContent>
    <meta name="description" content="My blog home page, where I can document my thoughts and learnings over time.">
</HeadContent>

<div class="container-wrapper">
    <div class="container mb-5">
        @if (Posts is not null)
        {
            <TagsSearchBar Tags="GetAllTags()" SelectedTag="@SelectedTag"></TagsSearchBar>
            <div class="row g-3 d-flex align-items-stretch">
                @foreach (var post in GetSearchedPosts(Posts))
                {
                    <div class="col-12 col-lg-4">
                        <div class="card rounded border-0 h-100 shadow">
                            <a class="card-link" href="@($"post/{post.Slug}")">
                                <img src=@post.Image.ImgixUrl loading="lazy" class="card-img-top rounded" alt="post hero"/>
                            </a>
                            <div class="card-body rounded d-flex flex-column">
                                <a class="card-link" href="@($"post/{post.Slug}")">
                                    <h5 class="card-title">@post.Title</h5>
                                </a>
                                <h6 class="card-subtitle text-light">@post.DatePublished.ToPreformattedString() · @post.ReadingTime.Minutes minute read</h6>
                                <p class="card-text mt-2">
                                    <TagsDisplay Tags=@post.DisplayTags.Value></TagsDisplay>
                                </p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
    <BlogFooter/>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "t")]
    public string SelectedTag { get; set; } = string.Empty;

    private IEnumerable<Post>? Posts { get; set; }

    private PersistingComponentStateSubscription _persistingComponentStateSubscription;

    protected override async Task OnInitializedAsync()
    {
        _persistingComponentStateSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        var posts = await PostsService.GetAsync(PersistentComponentState, Post.Key);

        Posts = PostLinker.Link(posts).ToList();

        if (!string.IsNullOrWhiteSpace(SelectedTag))
        {
            if (!NavigationManager.ToBaseRelativePath(NavigationManager.Uri).StartsWith("search"))
            {
                var path = $"/search?t={SelectedTag}";

                NavigationManager.NavigateTo(path);
            }

            SelectedTag = HttpUtility.UrlDecode(SelectedTag);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await JSInteropService.ResetScrollPositionAsync();

    private IEnumerable<Post> GetSearchedPosts(IEnumerable<Post> posts)
    {
        return string.IsNullOrEmpty(SelectedTag)
            ? posts
            : posts.Where(post =>
            {
                return post.Title.Contains(SelectedTag, StringComparison.OrdinalIgnoreCase) ||
                       post.DisplayTags.Value.Any(tag => tag.Contains(SelectedTag, StringComparison.OrdinalIgnoreCase)) ||
                       post.Content.Contains(SelectedTag, StringComparison.OrdinalIgnoreCase);
            });
    }

    private IEnumerable<string> GetAllTags() =>
        Posts!.SelectMany(post => post.DisplayTags.Value).Distinct().OrderBy(tag => tag);

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(Post.Key, Posts);

        return Task.CompletedTask;
    }

    public void Dispose() => _persistingComponentStateSubscription.Dispose();
}
