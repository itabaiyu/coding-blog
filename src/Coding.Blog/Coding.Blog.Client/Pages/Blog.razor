@page "/"
@page "/search/{Search}"
@using Coding.Blog.Library.Extensions
@implements IDisposable

<PageTitle>Will Baldoumas | Blog</PageTitle>

<div class="container mb-3">
    @if (Posts is null)
    {
        <LoadingSpinner/>
    }
    else
    {
        <div class="text-center mb-3">
            <input type="search" class="form-control rounded" placeholder="Search..." aria-label="search" aria-describedby="search-button" value="@_search" @oninput="HandleSearchInput">
        </div>
        <div class="row g-3 d-flex align-items-stretch">
            @foreach (var (slug, post) in GetSearchedPosts(Posts))
            {
                <div class="col-12 col-lg-4">
                    <div class="card rounded border-0 h-100 shadow">
                        <a class="card-link" href="@($"post/{slug}")">
                            <img src=@post.Hero.ImgixUrl class="card-img-top rounded" alt="hero" />
                        </a>
                        <div class="card-body rounded d-flex flex-column">
                            <h5 class="card-title">@post.Title</h5>
                            <h6 class="card-subtitle text-muted">@post.DatePublished.ToPreformattedString() · @post.ReadingTime.Minutes minute read</h6>
                            <p class="card-text mt-2">
                                <TagsDisplay Tags=@post.Tags></TagsDisplay>
                            </p>
                            <a href="@($"post/{slug}")" class="card-link mt-auto">Read More</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {

    private string _search = string.Empty;

    private const string PostsKey = "Posts";

    private IDictionary<string, Post>? Posts { get; set; }

    private PersistingComponentStateSubscription _persistingComponentStateSubscription;

    [Parameter] public string? Search { get; set; }

    private void HandleSearchInput(ChangeEventArgs args)
    {
        _search = args.Value?.ToString() ?? string.Empty;

        var path = string.IsNullOrEmpty(_search) ? "/" : $"/search/{HttpUtility.UrlEncode(_search)}";

        JavaScript.InvokeVoidAsync("ChangeUrl", path);
    }

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser())
        {
            await JavaScript.InvokeVoidAsync("resetScrollPosition");
        }

        _persistingComponentStateSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        Posts = await PersistentPostsService.GetAsync(ApplicationState, PostsKey);

        if (!string.IsNullOrWhiteSpace(Search))
        {
            _search = HttpUtility.UrlDecode(Search);
        }
    }

    private IDictionary<string, Post> GetSearchedPosts(IDictionary<string, Post> posts)
    {
        return string.IsNullOrEmpty(_search)
            ? posts
            : posts.Where(postBySlug =>
            {
                var (_, post) = postBySlug;

                return post.Title.Contains(_search, StringComparison.OrdinalIgnoreCase) ||
                       post.Tags.Any(tag => tag.Contains(_search, StringComparison.OrdinalIgnoreCase)) ||
                       post.Content.Contains(_search, StringComparison.OrdinalIgnoreCase);
            }).ToDictionary();
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(PostsKey, Posts);

        return Task.CompletedTask;
    }

    public void Dispose() => _persistingComponentStateSubscription.Dispose();
}
