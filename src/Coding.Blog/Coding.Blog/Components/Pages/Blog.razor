@page "/blog"
@page "/blog/{Tag}"

@rendermode InteractiveServer
@implements IDisposable

<div class="container mb-3">

    <div class="text-center mb-3">
        <input type="search" class="form-control rounded" placeholder="Search..." aria-label="search" aria-describedby="search-button" @bind-value="_searchText" @bind-value:event="oninput">
    </div>
    <div class="row g-3 d-flex align-items-stretch">
        @foreach (var (slug, post) in GetFilteredPosts())
        {
            <div class="col-12 col-lg-4">
                <div class="card border-0 h-100 shadow">
                    <a href="@($"post/{slug}")">
                        <img src=@post.Hero.ImgixUrl class="card-img-top" alt="hero"/>
                    </a>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@post.Title</h5>
                        <h6 class="card-subtitle text-muted">@post.DatePublished.ToShortDateString() · @post.ReadingTime.Minutes minute read</h6>
                        <p class="card-text mt-2">
                            <TagsDisplay Tags=@post.Tags></TagsDisplay>
                        </p>
                        <a href="@($"post/{slug}")" class="card-link mt-auto">Read More</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    private string _searchText = string.Empty;

    private const string PostsKey = "Posts";

    [Parameter]
    public string? Tag { get; set; }

    private IDictionary<string, Post> Posts { get; set; } = new Dictionary<string, Post>();

    private PersistingComponentStateSubscription _persistingComponentStateSubscription;

    protected override async Task OnInitializedAsync()
    {
        _persistingComponentStateSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        IDictionary<string, Post> posts = new Dictionary<string, Post>();

        if (ApplicationState.TryTakeFromJson<IDictionary<string, Post>>(PostsKey, out var postsFromState))
        {
            posts = postsFromState ?? new Dictionary<string, Post>();
        }

        if (posts.Count == 0 && BlogPostsContainer.Posts.Any())
        {
            posts = BlogPostsContainer.Posts;
        }

        if (posts.Count == 0)
        {
            posts = await GetPostsAsync();
            BlogPostsContainer.Posts = posts;
        }

        Posts = posts;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender) => await Js.InvokeVoidAsync("resetScrollPosition");

    private async Task<IDictionary<string, Post>> GetPostsAsync()
    {
        var blogPosts = await PostsService.GetAsync();

        return blogPosts.ToDictionary(post => post.Slug, post => post);
    }

    private IDictionary<string, Post> GetFilteredPosts() => GetTaggedPosts(GetSearchedPosts(Posts));

    private IDictionary<string, Post> GetTaggedPosts(IDictionary<string, Post> posts) => Tag is null ?
        posts :
        posts.Where(post => post.Value.Tags.Any(tag => tag.Equals(Tag, StringComparison.OrdinalIgnoreCase))).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

    private IDictionary<string, Post> GetSearchedPosts(IDictionary<string, Post> posts)
    {
        return string.IsNullOrEmpty(_searchText) ? posts : posts.Where(post =>
        {
            var postValue = post.Value;

            return postValue.Title.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ||
                   postValue.Tags.Any(tag => tag.Contains(_searchText, StringComparison.OrdinalIgnoreCase)) ||
                   postValue.Content.Contains(_searchText, StringComparison.OrdinalIgnoreCase);
        }).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(PostsKey, Posts);

        return Task.CompletedTask;
    }

    public void Dispose() => _persistingComponentStateSubscription.Dispose();
}
